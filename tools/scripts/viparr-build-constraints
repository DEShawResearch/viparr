#!/usr/bin/garden-exec
#{
# source `dirname $0`/../share/env.sh
# exec python $0 "$@"
#}

"""
Builds or rebuilds constraints for hydrogen groups in a chemical system. This is
performed by default at the end of ``viparr`` execution. Each hydrogen group
consists of a heavy atom and all hydrogens bonded to it. A heavy atom with `n`
hydrogens will be constrained with a constraint of type `ahn`. In the case of
water, the constraint type will be `hoh`.

The constraint length parameters (and angle parameter, in the case of water)
are obtained from the ``stretch_harm`` and ``angle_harm`` tables. Stretch and
angle terms that are constrained by a constraint group are marked by setting the
`constrained` field in the ``stretch_harm`` or ``angle_harm`` table to 1, unless
the `-k` option is given. Constrained terms can safely be ignored by simulation
programs as long as the constraints are evaluated.
"""

import viparr
import msys
import sys
import os

def parse_args():
    from argparse import ArgumentParser, RawDescriptionHelpFormatter
    parser = ArgumentParser(description=__doc__,
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("ifile",
            help="Input file")
    parser.add_argument("-o", "--output",
            help="Output file (default: overwrite input file")
    parser.add_argument("-s", "--selection", default="all",
            help="selection of atoms to build constraints")
    parser.add_argument("-k", "--keep", action="store_true",
            help="keep bonded terms that overlap constraints")
    parser.add_argument("-x", "--exclude", action="append", default=[],
            help="don't build constraint (hoh, ah1, ...)")
    parser.add_argument("-v", "--verbose", action="store_true",
            help="extra verbosity")
    return parser.parse_args()

def main():
    args = parse_args()
    if args.verbose:
        print("Reading", args.ifile)
    mol = msys.Load(args.ifile)
    atoms = mol.select(args.selection)
    viparr.BuildConstraints(mol, atoms, keep=args.keep, exclude=args.exclude,
            verbose=args.verbose)
    mol.coalesceTables()
    ofile = args.output or args.ifile
    if args.verbose:
        print("Writing", ofile)
    msys.Save(mol, ofile)

if __name__ == '__main__':
    main()

# vim: filetype=python
