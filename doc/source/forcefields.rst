```````````
Forcefields
```````````


Forcefield format
=================

A ``viparr`` forcefield is a directory of files specified in JSON
format. (See http://json.org for details.) The forcefield format for
``viparr`` versions 3.0 and later differs from that for ``viparr``
version 1.*.

Loading the ``viparr-ff/*/data`` module will append to the environment variable
VIPARR_FFPATH a path containing a number of Amber, Charmm, Cgenff,
Opls, and water forcefields available for use with the -f command-line
option.

Rules file
----------

Any forcefield that is not a forcefield patch must contain a rules file. The
rules file is a JSON dictionary with the following keys and values. Default
values are used for any unspecified keys.

 - **info** (array of strings): Provides citations and any other pertinent
   information. Default: []

 - **vdw_func** (string): The functional form of the VDW interaction.
   Default: ""

 - **vdw_comb_rule** (string): The combining rule for the VDW interaction; 
   legal values depend on the value of **vdw_func**. Default: ""

 - **exclusions** (integer): The exclusion rule; should be 1, 2, 3 or 4.
   Default: Length of es_scale or lj_scale plus 1, or 4 if both es_scale and
   lj_scale are unspecified.

 - **es_scale** (list of floats): Provides a scale factor for each excluded
   nonbonded electrostatic interaction distance. Default: [0,...,0]

 - **lj_scale** (list of floats): Provides a scale factor for each excluded
   nonbonded Lennard-Jones interaction distance. Default: [0,...,0]

 - **plugins** (list of strings): Indicates what functional forms are present
   in the forcefield. Each plugin processes a functional form by reading one
   or more parameter files from the forcefield directory and generating
   interaction terms in the system. Default: []
 
 - **fatal** (bool): Whether ``viparr`` should exit in error if the parameters
   for a required interaction term are not found in the forcefield. Default:
   True
 
 - **nbfix_identifier** (str): A unique identifier label shared by a group of
   forcefields that should be processed together when applying NB-fix
   parameters. Default: ""

Template files
--------------

Any file of name "template..." is treated as a template file. The template file
is a JSON dictionary whose keys are template names and values are dictionaries
describing the atoms, bonds, and other structures present in the template. The
bond topology described by a template must be connected. Atoms in the template
must have unique names; bonds, impropers, etc. may refer to atoms outside the
template by using the names "$1", "$2", etc.

Note that viparr does not employ the concept of "patch" residues; if a residue
has several different chemical forms corresponding to different termini,
phosophorylation states, etc., there should a different template for each form.

Each template may have the following keys and values:

 - **atoms**: ``[ "name", anum, charge, ["btype", "nbtype"]]``.  
   Alternatively: ``[ "name", anum, charge, ["btype"]]```

   *name* is the unique name for the atom.  *anum* is the atomic number.
   *charge* is the partial charge. *btype* is the atom type for bonded
   interactions. If *nbtype* is given, it is used as the atom type for nonbonded
   interactions; otherwise the value of *btype* is used.

 - **bonds**: ``[ "name1", "name2" ]``

   All possible angle and dihedral terms will be autogenerated by ``viparr``
   using the bond topology.

 - **impropers**: ``[ "name1", "name2", "name3", "name4" ]``

 - **cmap**: ``[ "name1", "name2", "name3", "name4", "name5", "name6, "name7", "name8" ]``

 - **pseudos**: ``[ "name", charge, ["btype", "nbtype"], "function", "site_1", ..., "site_n", "pset"``].
   Alternatively, ``[ "name", charge, ["btype"], "function", "site_1", ..., "site_n", "pset"]``.  

   Declares a pseudo-atom for the residue. *charge*, *btype*, and *nbtype* are
   as for **atoms**. *function* is the category of pseudo atom; it may indicate
   the type of virtual site used to position the pseudo atom, and pseudo atoms
   with different functions are processed different by forcefield plugins.
   *site_1* to *site_n* are names of atoms that are used to position the pseudo
   atom. Finally, *pset* is used to distinguish otherwise identical pseudo
   atoms, if the identities of the *sites* are not sufficient.

Parameter files
---------------

``viparr`` expects parameters for a forcefield to be organzized into separate
files based on the functional form of the interaction. Parameter files are JSON
lists of dictionaries; each dictionary corresponds to one parameter set and may
have the following keys:

 - **type** (string or list of strings): Which atom types to match to these
   parameters. The number of types depends on the interaction; there should be
   the same number of types in each parameter set. Types can be delineated as a
   list of strings or ' '-concatenated as a single string.

 - **params** (dictionary): The parameters, with keys being the parameter names
   and values being the corresponding parameter values. Every **params**
   dictionary in a parameter file should have the same keys (parameter names).

Cmap files
----------

For charmm-style cmap terms, parameters may be specified in a forcefield file
called 'cmap'. This is a JSON list of cmap tables, where each cmap table is a
list of [*phi*, *psi*, *energy*] triples specifying the cmap parameters.
The order of cmap tables in this file is important, as they are referred to by
index in the "cmapid" parameter of the 'torsiontorsion_cmap' parameter file.


Migrating from older forcefield names
=====================================

There have been changes in the naming scheme between ``viparr-ff/1.9.1``
and ``viparr-ff/2.0.0``/``viparr-ffpublic/1.0.0c7``.

The following table summarizes the changes in our public forcefields:
``viparr-ffpublic``.


.. literalinclude:: ffrenames.rst

